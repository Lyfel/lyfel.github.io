(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{171:function(t,a,s){"use strict";s.r(a);var r=s(0),v=Object(r.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"理解javascript-中的执行上下文和执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解javascript-中的执行上下文和执行栈"}},[t._v("#")]),t._v(" 理解JavaScript 中的执行上下文和执行栈")]),t._v(" "),s("p",[t._v("执行上下文是当前 JavaScript 代码被解析和执行时所在环境的抽象概念。")]),t._v(" "),s("h2",{attrs:{id:"执行上下文的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的类型"}},[t._v("#")]),t._v(" 执行上下文的类型")]),t._v(" "),s("p",[t._v("执行上下文总共有三种类型")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("全局执行上下文")]),t._v("：只有一个，浏览器中的全局对象就是 window 对象，this 指向这个全局对象。")]),t._v(" "),s("li",[s("strong",[t._v("函数执行上下文")]),t._v("：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文。")]),t._v(" "),s("li",[s("strong",[t._v("Eval 函数执行上下文")]),t._v("：指的是运行在 eval 函数中的代码，很少用而且不建议使用。")])]),t._v(" "),s("h2",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),s("p",[t._v("执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。")])])}],!1,null,null,null);a.default=v.exports}}]);